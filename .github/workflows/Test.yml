name: ðŸ¤– Test

on:
  workflow_call:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Install dependencies
        run: poetry install --with tests

      - name: Run tests with coverage
        run: |
          poetry run coverage run -m unittest discover 
          poetry run coverage report --omit="tests/*"
          poetry run coverage xml --omit="tests/*" -o coverage.xml

      - name: Report partial coverage results
        if: github.event_name != 'release'
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -l Python -r coverage.xml
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  comp-tests:
    name: Compatibility
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        dbms: [ sqlite, psql ]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: auto_rest
          POSTGRES_USER: ar_user
          POSTGRES_PASSWORD: ar_password
        ports:
          - 5432:5432

    steps:
      - name: Fetch image artifact
        uses: actions/download-artifact@v4
        with:
          name: auto-rest-docker
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/auto-rest.tar

      - name: Setup SQLite
        if: matrix.dbms == 'sqlite'
        run: |
          touch test.db
          docker run -d -p 8081:8081 auto-rest \
            --sqlite \
            --db-name ./test.db \
            --server-host 0.0.0.0 \
            --server-port 8081
          
          sleep 5

      - name: Setup PostgreSQL
        if: matrix.dbms == 'psql'
        run: |
          docker run -p 8081:8081 auto-rest \
            --psql \
            --db-host localhost \
            --db-port 5432 \
            --db-name auto_rest \
            --db-user ar_user \
            --db-pass ar_password \
            --server-host 0.0.0.0 \
            --server-port 8081
          
          sleep 5

      - name: Check API is running
        run: curl localhost:8081

  report-test-status:
    name: Report Test Status
    runs-on: ubuntu-latest
    needs: [ unit-tests, comp-tests ]
    if: always()

    steps:
      - name: Check test status
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'skipped') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
