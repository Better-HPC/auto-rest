name: ðŸ¤– Test

on:
  workflow_call:

jobs:
  function-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        db: [ sqlite, mysql, postgres, mssql, oracle ]

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports: [ "3306:3306" ]
        options: >-
          --health-cmd "mysqladmin ping -h localhost -proot"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 10

      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: testdb
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U root"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 10

      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "SqlPassword123!"
        ports: [ "1433:1433" ]
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P SqlPassword123! -Q 'select 1'"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 20

      oracle:
        image: gvenzl/oracle-xe:21.3.0-slim
        env:
          ORACLE_PASSWORD: oracle
          APP_USER: testuser
          APP_USER_PASSWORD: oracle
        ports: [ "1521:1521" ]
        options: >-
          --health-cmd "/opt/oracle/checkDBStatus.sh"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 20

    steps:
      - uses: actions/checkout@v4

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11", "3.12", "3.13" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Install dependencies
        run: poetry install --with tests

      - name: Run tests with coverage
        run: |
          poetry run coverage run -m unittest discover 
          poetry run coverage report --omit="tests/unit_tests/*"
          poetry run coverage xml --omit="tests/unit_tests/*" -o coverage.xml

      - name: Report partial coverage results
        if: github.event_name != 'release'
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -l Python -r coverage.xml
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  # Tell codacy we are done reporting test coverage
  report-code-coverage:
    name: Report Coverage
    needs: unit-tests
    runs-on: ubuntu-latest

    steps:
      - name: Finish reporting coverage
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  report-test-status:
    name: Report Test Status
    runs-on: ubuntu-latest
    needs: [ unit-tests, function-tests ]
    if: always()

    steps:
      - name: Check test status
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'skipped') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
