name: ðŸ¤– Test

on:
  workflow_call:

jobs:
  function-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        db: [ sqlite, mysql, postgres, mssql, oracle ]

    steps:
      - name: Install database clients
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mysql-client \
            postgresql-client \
            unixodbc-dev \
            freetds-bin \
            sqlcmd \
            sqlite3

      - name: Launch ${matrix.db} container
        run: |
          case "${{ matrix.db }}" in

          mysql)
            docker run -d --name db -p 3306:3306 \
              -e MYSQL_ROOT_PASSWORD=root \
              -e MYSQL_DATABASE=testdb \
              -e MYSQL_USER=testuser \
              -e MYSQL_PASSWORD=testpass \
              mysql:latest
            ;;

          postgres)
            docker run -d --name db -p 5432:5432 \
              -e POSTGRES_USER=testuser \
              -e POSTGRES_PASSWORD=testpass \
              -e POSTGRES_DB=testdb \
              postgres:latest
            ;;

          mssql)
            docker run -d --name db -p 1433:1433 \
              -e ACCEPT_EULA=Y \
              -e SA_PASSWORD=StrongPassword123! \
              mcr.microsoft.com/mssql/server:2022-latest
            ;;

          oracle)
            docker run -d --name db -p 1521:1521 \
              -e APP_USER=testuser \
              -e APP_USER_PASSWORD=testpass \
              -e ORACLE_PASSWORD=testpass \
              gvenzl/oracle-xe:21.3.0-slim
            ;;

          sqlite)
            # No container required
            ;;
          esac

      - name: Wait for database readiness
        run: |
          case "${{ matrix.db }}" in

          mysql)
            for i in {1..30}; do
              mysqladmin ping -h127.0.0.1 -ptestpass && break
              sleep 2
            done
            ;;

          postgres)
            for i in {1..30}; do
              pg_isready -U testuser -h127.0.0.1 && break
              sleep 2
            done
            ;;

          mssql)
            for i in {1..30}; do
              /opt/mssql-tools18/bin/sqlcmd -C \
                -S 127.0.0.1 -U sa -P StrongPassword123! \
                -Q "SELECT 1" && break
              sleep 2
            done
            ;;

          oracle)
            for i in {1..60}; do
              docker logs db 2>&1 | grep -q "DATABASE IS READY TO USE" && break
              sleep 5
            done
            ;;

          sqlite)
            ;;
          esac

      - name: Initialize Databases
        run: |
          case "${{ matrix.db }}" in

          sqlite)
            sqlite3 test.db < tests/seed/init.sql
            ;;

          mysql)
            mysql -h127.0.0.1 -utestuser -ptestpass testdb < tests/seed/init.sql
            ;;

          postgres)
            psql postgres://testuser:testpass@127.0.0.1:5432/testdb \
              -f tests/seed/init.sql
            ;;

          mssql)
            /opt/mssql-tools18/bin/sqlcmd -C \
              -S 127.0.0.1 -U sa -P StrongPassword123! \
              -Q "CREATE LOGIN testuser WITH PASSWORD='testpass';
                  CREATE USER testuser FOR LOGIN testuser;
                  ALTER ROLE db_owner ADD MEMBER testuser;"

            /opt/mssql-tools18/bin/sqlcmd -C \
              -S 127.0.0.1 -U testuser -P testpass \
              -i tests/seed/init.sql
            ;;

          oracle)
            sqlplus testuser/testpass@//127.0.0.1/XEPDB1 @tests/seed/init.sql
            ;;

          esac

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11", "3.12", "3.13" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Install dependencies
        run: poetry install --with tests

      - name: Run tests with coverage
        run: |
          poetry run coverage run -m unittest discover 
          poetry run coverage report --omit="tests/unit_tests/*"
          poetry run coverage xml --omit="tests/unit_tests/*" -o coverage.xml

      - name: Report partial coverage results
        if: github.event_name != 'release'
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -l Python -r coverage.xml
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  # Tell codacy we are done reporting test coverage
  report-code-coverage:
    name: Report Coverage
    needs: unit-tests
    runs-on: ubuntu-latest

    steps:
      - name: Finish reporting coverage
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  report-test-status:
    name: Report Test Status
    runs-on: ubuntu-latest
    needs: [ unit-tests, function-tests ]
    if: always()

    steps:
      - name: Check test status
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'skipped') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
